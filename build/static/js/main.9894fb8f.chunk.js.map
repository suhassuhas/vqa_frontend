{"version":3,"sources":["components/Simple_imgs.js","components/Simple.js","components/Complex_imgs.js","components/Complex.js","components/Button.js","components/Home.js","components/Satellite_imgs.js","components/Satellite.js","App.js","reportWebVitals.js","index.js"],"names":["images_simple","Simple","useState","selectedImg","setSelectedImg","history","useHistory","ans","setAns","classes","makeStyles","createStyles","root","backgroundColor","color","padding","fontSize","width","marginLeft","marginTop","useStyles","useSpeechRecognition","transcript","resetTranscript","SpeechRecognition","browserSupportsSpeechRecognition","msg","SpeechSynthesisUtterance","className","Grid","container","item","xs","Paper","style","Box","Typography","variant","height","align","Button","size","onClick","goBack","map","img","index","border","src","alt","textAlign","margin","startListening","m","stopListening","onSubmit","event","console","log","new_ques","undefined","target","value","formData","FormData","append","get","axios","method","url","data","then","val","text","window","speechSynthesis","speak","catch","err","preventDefault","gutterBottom","rows","cols","placeholder","type","images_complex","Complex","file","setQues","fileImage","includes","files","accept","onChange","URL","createObjectURL","styled","MuiButton","spacing","vqaheader","position","background","newcolor","maxWidth","alignItemsAndJustifyContent","display","alignItems","justifyContent","imageStyle","media","boxImg","vqafooter","Home","class","Card","CardActionArea","CardMedia","image","title","CardContent","component","marginBottom","push","paddingTop","images_satellite","Satellite","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9894fb8f.chunk.js","sourcesContent":["const images_simple = [\r\n    \"0.png\",\r\n    \"4.png\",\r\n    \"32.png\",\r\n    \"47.png\",\r\n    \"48.png\",\r\n    \"64.png\",\r\n    \"65.png\",\r\n    \"77.png\",\r\n  ];\r\nexport default images_simple","import React,{useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {Paper,Grid,Box,Typography,Button,TextareaAutosize} from '@material-ui/core'\r\n//import {makeStyles} from '@material-ui/core/styles'\r\nimport images_simple from './Simple_imgs'\r\nimport \"./styles.css\"\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport axios from 'axios'\r\n\r\nexport default function Simple() {\r\n\r\n    const [selectedImg, setSelectedImg] = useState(images_simple[0]);\r\n    const history = useHistory();\r\n    const [ques,setQues] = useState(\"\")\r\n    const [ans,setAns] = useState(\"\")\r\n\r\n    const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n        backgroundColor: \"#000\",\r\n        color:\"#fff\",\r\n        padding: \"1vh\",\r\n        fontSize: '18px',\r\n        width: '40vh',\r\n        marginLeft:'20vh',\r\n        marginTop:'5vh'\r\n        },\r\n    }),\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const { transcript, resetTranscript } = useSpeechRecognition()\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    let msg = new SpeechSynthesisUtterance();\r\n\r\n    const getAnsfromapi = (event) => {\r\n        console.log(selectedImg)\r\n        let new_ques = undefined\r\n        new_ques=event.target[0].value\r\n        if(new_ques===\"\"){\r\n          //console.log(transcript)\r\n          new_ques = transcript\r\n        }\r\n        \r\n        let formData = new FormData()\r\n        formData.append('ques',new_ques)\r\n        formData.append('path',selectedImg)\r\n        console.log(formData.get('ques'),formData.get('path'))\r\n              \r\n        axios({\r\n          method: 'post',\r\n          url: 'http://127.0.0.1:8000/simplelocal/',\r\n          data: formData,\r\n        })\r\n        .then((val) => {\r\n          console.log(val.data)\r\n          setAns(val.data[\"answer\"])\r\n          msg.text = \"The answer is \"+val.data[\"answer\"]\r\n          window.speechSynthesis.speak(msg);\r\n        })\t\r\n        .catch(err => console.log(err))\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"main\">\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Paper style={{backgroundColor:\"#000\",color: '#fff'}}>\r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Simple Visual Question Answering </Typography>\r\n                            </Box>\r\n                            <Box padding=\"1vh\" width=\"110vh\" height=\"23.5vh\" >\r\n                                <Typography variant=\"h4\" align=\"justify\">\r\n                                    This is a demo of the model trained on simple images.Question must be related to shape color of the object in the image.\r\n                                    Try this model by selecting a image and type the question . You can also use your microphone.Then press Submit to get the \r\n                                    answer from the model.\r\n                                </Typography>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" onClick={() => history.goBack()}>Go Back</Button>\r\n                            </Box>\r\n                \r\n                            <div className=\"container\">\r\n                                <div className=\"imgContainer\">\r\n                                {images_simple.map((img, index) => (\r\n                                    <img\r\n                                    style={{border : selectedImg === img ? \"2px solid white\":\"\"}}\r\n                                    src={\"./simple_images/\"+img}\r\n                                    key={index}\r\n                                    alt=\"dog\"\r\n                                    onClick={() => setSelectedImg(img)}\r\n                                    />\r\n                                ))}\r\n                                </div>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Paper style={{backgroundColor:\"#000000\",color: '#fff'}}> \r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Selected Image</Typography>\r\n                            </Box>\r\n                            <div className=\"selectImage\">\r\n                               <img\r\n                                src={\"./simple_images/\"+selectedImg}\r\n                                className=\"selected\"\r\n                               />         \r\n                            </div> \r\n                        </Paper> \r\n                        <div style={{textAlign:\"center\",margin:\"2vh\"}}>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.startListening} m={2}>Start</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.stopListening} m={2}>Stop</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={resetTranscript} m={2}>Reset</Button>\r\n                        </div>\r\n                        <form style={{textAlign:\"center\",marginTop:\"1vh\"}} onSubmit={getAnsfromapi}>\r\n                                <Typography variant=\"h4\" color=\"textPrimary\" gutterBottom>Enter Question Below</Typography>\r\n                                <textarea rows=\"6\" cols=\"50\" placeholder={transcript}></textarea>\r\n                                <br></br>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" type=\"submit\" margin=\"5vh\">Submit</Button>\r\n                                <br></br>\r\n                                <div className={classes.root}>{ans}</div>\r\n                        </form>                        \r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","const images_complex = [\r\n    \"COCO_val2014_000000000208.jpg\",\r\n    \"COCO_val2014_000000000241.jpg\",\r\n    \"COCO_val2014_000000000257.jpg\",\r\n    \"COCO_val2014_000000000283.jpg\",\r\n    \"COCO_val2014_000000000328.jpg\",\r\n    \"COCO_val2014_000000000338.jpg\",\r\n    \"COCO_val2014_000000000415.jpg\",\r\n    \"COCO_val2014_000000000428.jpg\"\r\n  ];\r\nexport default images_complex","import React,{useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {Paper,Grid,Box,Typography,Button,TextareaAutosize} from '@material-ui/core'\r\n//import {makeStyles} from '@material-ui/core/styles'\r\nimport images_complex from './Complex_imgs'\r\nimport \"./styles.css\"\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport axios from 'axios'\r\n\r\nexport default function Complex() {\r\n\r\n    const [selectedImg, setSelectedImg] = useState(images_complex[0]);\r\n    const [imageFile,setImageFile] = useState({ file: null })\r\n    const history = useHistory();\r\n    const [ques,setQues] = useState(\"\")\r\n    const [ans,setAns] = useState(\"\")\r\n\r\n    const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n        backgroundColor: \"#000\",\r\n        color:\"#fff\",\r\n        padding: \"1vh\",\r\n        fontSize: '18px',\r\n        width: '40vh',\r\n        marginLeft:'20vh',\r\n        marginTop:'5vh'\r\n        },\r\n    }),\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const { transcript, resetTranscript } = useSpeechRecognition()\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    let msg = new SpeechSynthesisUtterance();\r\n\r\n    const getAnsfromapi = (event) => {\r\n        console.log(selectedImg)\r\n        //Check Whether input question is typed or entered through microphone\r\n        //console.log(event)\r\n        let new_ques = undefined\r\n        new_ques=event.target[1].value\r\n        if(new_ques===\"\"){\r\n          //console.log(transcript)\r\n          new_ques = transcript\r\n        }\r\n        setQues(new_ques)\r\n        \r\n        let fileImage\r\n        console.log('evtn')\r\n        console.log(event)\r\n        if(!selectedImg.includes(\"COCO\")){\r\n            console.log('ekehjb')\r\n          \r\n          fileImage=event.target[0].files[0]\r\n          let formData = new FormData()\r\n          formData.append(\r\n            \"file\",\r\n            fileImage\r\n          )       \r\n          axios({\r\n            method: 'post',\r\n            url: 'http://127.0.0.1:8000/complex/?ques='+new_ques,\r\n            data: formData,\r\n          })\r\n          .then((val) => {\r\n            //console.log(val.data)\r\n            setAns(val.data[\"answer\"])\r\n            msg.text = \"The answer is \"+val.data[\"answer\"]\r\n            window.speechSynthesis.speak(msg);\r\n          })\t\r\n          .catch(err => console.log(err))\r\n          event.preventDefault();\r\n  \r\n        }else{\r\n          let formData = new FormData()\r\n          formData.append('ques',new_ques)\r\n          formData.append('path',selectedImg)\r\n          console.log('error')\r\n          console.log(formData.get('ques'),formData.get('path'))\r\n          console.log('error')\r\n          axios({\r\n            method: 'post',\r\n            url: 'http://127.0.0.1:8000/complexlocal/',\r\n            data: formData,\r\n          })\r\n          .then((val) => {\r\n            console.log(val.data)\r\n            setAns(val.data[\"answer\"])\r\n            msg.text = \"The answer is \"+val.data[\"answer\"]\r\n            window.speechSynthesis.speak(msg);\r\n          })\t\r\n          .catch(err => console.log(err))\r\n          event.preventDefault();\r\n        }\r\n        \r\n    }\r\n    \r\n    const changeSelectedImage = (event) => {\r\n        console.log('jio')\r\n        console.log(event.target.files[0])\r\n        setSelectedImg(URL.createObjectURL(event.target.files[0]))\r\n        event.preventDefault();\r\n    }\r\n\r\n    const resetFile = ()=>{\r\n        setSelectedImg(\"\")\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"main\">\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Paper style={{backgroundColor:\"#000\",color: '#fff'}}>\r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Complex Visual Question Answering </Typography>\r\n                            </Box>\r\n                            <Box padding=\"1vh\" width=\"110vh\" height=\"23.5vh\" >\r\n                                <Typography variant=\"h4\" align=\"justify\">\r\n                                    This is a demo of the model trained on simple images.Question must be related to shape color of the object in the image.\r\n                                    Try this model by selecting a image and type the question . You can also use your microphone.Then press Submit to get the \r\n                                    answer from the model.\r\n                                </Typography>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" onClick={() => history.goBack()}>Go Back</Button>\r\n                            </Box>\r\n                \r\n                            <div className=\"container\">\r\n                                <div className=\"imgContainer\">\r\n                                {images_complex.map((img, index) => (\r\n                                    <img\r\n                                    style={{border : selectedImg === img ? \"2px solid white\":\"\"}}\r\n                                    src={\"./complex_images/\"+img}\r\n                                    key={index}\r\n                                    alt=\"dog\"\r\n                                    onClick={() => setSelectedImg(img)}\r\n                                    />\r\n                                ))}\r\n                                </div>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Paper style={{backgroundColor:\"#000000\",color: '#fff'}}> \r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Selected Image</Typography>\r\n                            </Box>\r\n                            <div className=\"selectImage\">\r\n                               <img\r\n                                src={selectedImg}\r\n                                className=\"selected\"\r\n                               />         \r\n                            </div> \r\n                            \r\n                        </Paper> \r\n                        \r\n                        {\r\n                            (\r\n                                    <div style={{ textAlign: \"center\" }}>\r\n                                        <button onClick={resetFile}>Remove File</button>\r\n                                    </div>\r\n                         )}\r\n                        <br></br>                        \r\n                        <div style={{textAlign:\"center\",margin:\"2vh\"}}>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.startListening} m={2}>Start</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.stopListening} m={2}>Stop</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={resetTranscript} m={2}>Reset</Button>\r\n                        </div>\r\n\r\n\r\n                        <form style={{textAlign:\"center\",marginTop:\"1vh\"}} onSubmit={getAnsfromapi}>\r\n                                <div className=\"custom-file\">\r\n                                    <input type=\"file\" className=\"custom-file-input\" accept=\"image/png, image/gif, image/jpeg\" onChange={changeSelectedImage}/>\r\n                                </div>\r\n                                <Typography variant=\"h4\" color=\"textPrimary\" gutterBottom>Enter Question Below</Typography>\r\n                                <textarea rows=\"4\" cols=\"50\" placeholder={transcript}></textarea>\r\n                                <br></br>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" type=\"submit\" margin=\"5vh\">Submit</Button>\r\n                                <br></br>\r\n                                <div className={classes.root}>{ans}</div>\r\n                        </form>                        \r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { styled } from \"@material-ui/core/styles\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport MuiButton from \"@material-ui/core/Button\";\r\n\r\n/**\r\n * Applies the spacing system to the material UI Button\r\n */\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nexport default Button;","import React from 'react'\r\nimport {Typography,Grid,Box,Card,CardActionArea,CardMedia,CardContent} from '@material-ui/core'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Button from './Button'\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles({\r\n    vqaheader:{\r\n        position: 'relative',\r\n        height: '100vh',\r\n        background: '#40324f',\r\n        color: '#fff',\r\n    },\r\n\r\n    newcolor:{\r\n        background: '#40324f',\r\n        color: '#fff',\r\n        maxWidth: 1000,\r\n    },\r\n\r\n    alignItemsAndJustifyContent: {\r\n        height:\"30%\",\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n\r\n    imageStyle:{\r\n      width: \"300px\",\r\n      height: \"300px\",\r\n      margin: \"0 auto\",\r\n      border: \"4px solid purple\"\r\n    },\r\n\r\n    root: {\r\n        maxWidth: 780,\r\n      },\r\n    media: {\r\n        height: 280,\r\n    },\r\n\r\n    boxImg :{\r\n        position: 'relative',\r\n        background: '#f7f5f7',\r\n        color: '#fff',\r\n    },\r\n\r\n    vqafooter:{\r\n        height: '20vh',\r\n        background: '#2a0240',\r\n        color: '#fff',\r\n    }\r\n\r\n})\r\n\r\n\r\nexport default function Home() {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes=useStyles();\r\n    return (\r\n        <div>\r\n                <div  className={classes.vqaheader} justifyContent=\"center\">\r\n                    <Box padding=\"1vh\">\r\n                        <Typography variant=\"h1\">Visual Question Anwering </Typography>\r\n                    </Box>\r\n\r\n                    <Box padding=\"1vh\">\r\n                        <img src=\"architecture.gif\" />\r\n                    </Box>\r\n\r\n                    <Box padding=\"2vh\" width=\"85vh\" height=\"30vh\" marginLeft=\"57vh\">\r\n                            <Typography variant=\"h4\" align=\"justify\">\r\n                                Visual questions selectively target different areas of an image,including background details and underlying context. \r\n                                As a result,a system that succeeds at Visual Question Answering typically needs a more detailed understanding of the \r\n                                image and complex reasoning than a system producing generic image captions .\r\n                            </Typography>\r\n                    </Box>\r\n\r\n                    <Box padding=\"2vh\">\r\n                        <img src=\"angle-down-solid.svg\"\r\n                         class=\"animate__animated animate__infinite animate__bounce\" \r\n                        style={{width: \"300px\",height: \"200px\"}}\r\n                        />\r\n                    </Box>\r\n\r\n                </div>\r\n\r\n                <div className={classes.boxImg} justifyContent=\"center\">\r\n                    <Box  padding=\"7vh\" marginLeft=\"53vh\" display=\"flex\">\r\n                         <Card className={classes.root}>\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                className={classes.media}\r\n                                image=\"./simple_images/47.png\"\r\n                                title=\"2D Images\"\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                                    Simple Images\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\r\n                                    Try VQA for 2D images. Here there are only simple shapes with \r\n                                    colors.Questions should be framed with respect to shape and color.\r\n                                </Typography>\r\n                                </CardContent>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"primary\" marginBottom=\"3vh\"  onClick={() => history.push('/simple')}>\r\n                                    Try This\r\n                                </Button>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                    </Box>\r\n\r\n                    <Box padding=\"7vh\" marginLeft=\"53vh\" display=\"flex\">\r\n                        <Card className={classes.root}>\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                className={classes.media}\r\n                                image=\"./complex_images/COCO_val2014_000000000208.jpg\"\r\n                                title=\"2D Images\"\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                                    Real Time Images\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\r\n                                    Try VQA for Real time images.Here the type of questions\r\n                                    can be complicated.\r\n                                </Typography>\r\n                                </CardContent>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"primary\" marginBottom=\"3vh\"  onClick={() => history.push('/complex')}>\r\n                                    Try This\r\n                                </Button>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                    </Box>\r\n\r\n                    <Box padding=\"7vh\" marginLeft=\"53vh\" display=\"flex\">\r\n                        <Card className={classes.root}>\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                className={classes.media}\r\n                                image=\"./satellite_images/6385.JPG\"\r\n                                title=\"2D Images\"\r\n                                />\r\n                                <CardContent>\r\n                                <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                                    Satellite Images\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\r\n                                    Try VQA for Satellite Images , which consists of pictures\r\n                                    in flooding area and ask relevant questions.\r\n                                </Typography>\r\n                                </CardContent>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"primary\" marginBottom=\"3vh\"  onClick={() => history.push('/satellite')}>\r\n                                    Try This\r\n                                </Button>\r\n                            </CardActionArea>\r\n                        </Card>                     \r\n                    </Box>\r\n                </div>\r\n\r\n\r\n                <div className={classes.vqafooter}>\r\n                    <Typography variant=\"h3\" paddingTop=\"10vh\">Connect with Us</Typography>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <img src=\"linkedin.svg\" style={{width: \"60px\",height: \"60px\",paddingTop:\"35px\"}} />\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <img src=\"instagram.svg\" style={{width: \"60px\",height: \"60px\",paddingTop:\"35px\"}} />\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <img src=\"github.svg\" style={{width: \"60px\",height: \"60px\",paddingTop:\"35px\"}}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                \r\n        </div>\r\n    )\r\n}\r\n","const images_satellite = [\r\n    \"6279.JPG\",\r\n    \"6385.JPG\",\r\n    \"6486.JPG\",\r\n    \"6506.JPG\",\r\n    \"6732.JPG\",\r\n    \"7288.JPG\",\r\n    \"7727.JPG\",\r\n    \"8821.JPG\",\r\n  ];\r\nexport default images_satellite","import React,{useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {Paper,Grid,Box,Typography,Button,TextareaAutosize} from '@material-ui/core'\r\n//import {makeStyles} from '@material-ui/core/styles'\r\nimport images_satellite from './Satellite_imgs'\r\nimport \"./styles.css\"\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport axios from 'axios'\r\n\r\nexport default function Satellite() {\r\n\r\n    const [selectedImg, setSelectedImg] = useState(images_satellite[0]);\r\n    const history = useHistory();\r\n    const [ques,setQues] = useState(\"\")\r\n    const [ans,setAns] = useState(\"\")\r\n\r\n    const useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n        backgroundColor: \"#000\",\r\n        color:\"#fff\",\r\n        padding: \"1vh\",\r\n        fontSize: '18px',\r\n        width: '40vh',\r\n        marginLeft:'20vh',\r\n        marginTop:'5vh'\r\n        },\r\n    }),\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const { transcript, resetTranscript } = useSpeechRecognition()\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    let msg = new SpeechSynthesisUtterance();\r\n\r\n    const getAnsfromapi = (event) => {\r\n        console.log(selectedImg)\r\n        let new_ques = undefined\r\n        new_ques=event.target[0].value\r\n        if(new_ques===\"\"){\r\n          //console.log(transcript)\r\n          new_ques = transcript\r\n        }\r\n        \r\n        let formData = new FormData()\r\n        formData.append('ques',new_ques)\r\n        formData.append('path',selectedImg)\r\n        console.log(formData.get('ques'),formData.get('path'))\r\n              \r\n        axios({\r\n          method: 'post',\r\n          url: 'http://127.0.0.1:8000/satellitelocal/',\r\n          data: formData,\r\n        })\r\n        .then((val) => {\r\n          console.log(val.data)\r\n          setAns(val.data[\"answer\"])\r\n          msg.text = \"The answer is \"+val.data[\"answer\"]\r\n          window.speechSynthesis.speak(msg);\r\n        })\t\r\n        .catch(err => console.log(err))\r\n        \r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"main\">\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Paper style={{backgroundColor:\"#000\",color: '#fff'}}>\r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Satellite Visual Question Answering </Typography>\r\n                            </Box>\r\n                            <Box padding=\"1vh\" width=\"110vh\" height=\"23.5vh\" >\r\n                                <Typography variant=\"h4\" align=\"justify\">\r\n                                    This is a demo of the model trained on simple images.Question must be related to shape color of the object in the image.\r\n                                    Try this model by selecting a image and type the question . You can also use your microphone.Then press Submit to get the \r\n                                    answer from the model.\r\n                                </Typography>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" onClick={() => history.goBack()}>Go Back</Button>\r\n                            </Box>\r\n                \r\n                            <div className=\"container\">\r\n                                <div className=\"imgContainer\">\r\n                                {images_satellite.map((img, index) => (\r\n                                    <img\r\n                                    style={{border : selectedImg === img ? \"2px solid white\":\"\"}}\r\n                                    src={\"./satellite_images/\"+img}\r\n                                    key={index}\r\n                                    alt=\"dog\"\r\n                                    onClick={() => setSelectedImg(img)}\r\n                                    />\r\n                                ))}\r\n                                </div>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Paper style={{backgroundColor:\"#000000\",color: '#fff'}}> \r\n                            <Box padding=\"1vh\">\r\n                                <Typography variant=\"h3\">Selected Image</Typography>\r\n                            </Box>\r\n                            <div className=\"selectImage\">\r\n                               <img\r\n                                src={\"./satellite_images/\"+selectedImg}\r\n                                className=\"selected\"\r\n                               />         \r\n                            </div> \r\n                        </Paper> \r\n                        <div style={{textAlign:\"center\",margin:\"2vh\"}}>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.startListening} m={2}>Start</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={SpeechRecognition.stopListening} m={2}>Stop</Button>\r\n                                    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={resetTranscript} m={2}>Reset</Button>\r\n                        </div>\r\n                        <form style={{textAlign:\"center\",marginTop:\"1vh\"}} onSubmit={getAnsfromapi}>\r\n                                <Typography variant=\"h4\" color=\"textPrimary\" gutterBottom>Enter Question Below</Typography>\r\n                                <textarea rows=\"6\" cols=\"50\" placeholder={transcript}></textarea>\r\n                                <br></br>\r\n                                <Button size=\"large\" variant=\"contained\" color=\"secondary\" type=\"submit\" margin=\"5vh\">Submit</Button>\r\n                                <br></br>\r\n                                <div className={classes.root}>{ans}</div>\r\n                        </form>                        \r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Simple from './components/Simple'\nimport Complex from  './components/Complex'\nimport Home from './components/Home'\nimport Satellite from './components/Satellite'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n\n          <Route path=\"/simple\" exact>\n            <Simple />\n          </Route>\n\n          <Route path=\"/complex\" exact>\n            <Complex />\n          </Route>\n\n          <Route path=\"/satellite\" exact>\n            <Satellite />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}